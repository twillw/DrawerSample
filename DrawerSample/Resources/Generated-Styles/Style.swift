
/*
* DO NOT EDIT THIS FILE DIRECTLY, IT IS OVERWRITTEN ON BUILD
**/


import UIKit

typealias StyleBlock = (_ view: UIView) -> Void

internal class Style {

    // MARK: instance variables

    internal static var instance = Style()
    internal var styles = [String: StyleBlock]()

    private init() {

        // add style blocks

        styles["button_primary"] = {
            [weak self = self]
            view in

            if let uibutton = view as? UIButton {

                    uibutton.backgroundColor = UIColor(colorLiteralRed: 36/255, green: 135/255, blue: 0/255, alpha: 1)
                    uibutton.titleLabel?.font = UIFont(name: "HelveticaNeue", size: 16)
                    uibutton.contentEdgeInsets = UIEdgeInsetsMake(6,6,6,6)
                    uibutton.tintColor = self?.hexStringToUIColor("#ffffff")
                    uibutton.layer.cornerRadius = 5

                    uibutton.heightAnchor.constraint(equalToConstant: 44.0)

            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }
        styles["button_secondary"] = {
            [weak self = self]
            view in

            if let uibutton = view as? UIButton {

                    uibutton.backgroundColor = UIColor(colorLiteralRed: 75/255, green: 40/255, blue: 109/255, alpha: 1)
                    uibutton.titleLabel?.font = UIFont(name: "HelveticaNeue", size: 16)
                    uibutton.contentEdgeInsets = UIEdgeInsetsMake(6,6,6,6)
                    uibutton.tintColor = self?.hexStringToUIColor("#ffffff")
                    uibutton.layer.cornerRadius = 5


            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }
        styles["label_display"] = {
            [weak self = self]
            view in

            if let uilabel = view as? UILabel {

                    uilabel.font = UIFont(name: "HelveticaNeue-Light", size: 28)
                    uilabel.textColor = UIColor(colorLiteralRed: 75/255, green: 40/255, blue: 109/255, alpha: 1)


            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }
        styles["label_heading_1"] = {
            [weak self = self]
            view in

            if let uilabel = view as? UILabel {

                    uilabel.font = UIFont(name: "HelveticaNeue-Light", size: 24)
                    uilabel.textColor = UIColor(colorLiteralRed: 75/255, green: 40/255, blue: 109/255, alpha: 1)


            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }
        styles["label_heading_2"] = {
            [weak self = self]
            view in

            if let uilabel = view as? UILabel {

                    uilabel.font = UIFont(name: "HelveticaNeue", size: 20)
                    uilabel.textColor = UIColor(colorLiteralRed: 75/255, green: 40/255, blue: 109/255, alpha: 1)


            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }

    }


    // MARK: internal methods

    internal func apply(style styleString: String, toView view: UIView) {

         let styleBlock = styles[styleString]
         styleBlock?(view)
    }


    // MARK: private methods

    private func hexStringToUIColor(_ hex: String) -> UIColor {

        var cString:String = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()

        if (cString.hasPrefix("#")) {
            cString.remove(at: cString.startIndex)
        }

        if ((cString.characters.count) != 6) {
            return UIColor.gray
        }

        var rgbValue:UInt32 = 0
        Scanner(string: cString).scanHexInt32(&rgbValue)

        return UIColor(
            red: CGFloat((rgbValue & 0xFF0000) >> 16) / 255.0,
            green: CGFloat((rgbValue & 0x00FF00) >> 8) / 255.0,
            blue: CGFloat(rgbValue & 0x0000FF) / 255.0,
            alpha: CGFloat(1.0)
        )
    }
}