
/*
* DO NOT EDIT THIS FILE DIRECTLY, IT IS OVERWRITTEN ON BUILD
**/


import UIKit

typealias StyleBlock = (_ view: UIView) -> Void

internal class Style {

    // MARK: instance variables

    internal static var instance = Style()
    internal var styles = [String: StyleBlock]()

    private init() {

        // add style blocks

        {{ #styles }}
        styles["{{ name }}"] = {
            [weak self = self]
            view in

            if let {{ variableName }} = view as? {{ className }} {

                // properties
                {{ #properties }}
                    {{{ variableName }}}.{{{ propertyName }}} = {{{ value }}}
                {{ /properties }}

                // method calls
                {{ #methods }}
                    {{{ variableName }}}.{{{ methodCall }}}
                {{ /methods }}

            }

            view.translatesAutoresizingMaskIntoConstraints = false
            view.setNeedsLayout()
        }
        {{ /styles }}

    }


    // MARK: internal methods

    internal func apply(style styleString: String, toView view: UIView) {

         let styleBlock = styles[styleString]
         styleBlock?(view)
    }


    // MARK: private methods

    private func hexStringToUIColor(_ hex: String) -> UIColor {

        var cString:String = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased()

        if (cString.hasPrefix("#")) {
            cString.remove(at: cString.startIndex)
        }

        if ((cString.characters.count) != 6) {
            return UIColor.gray
        }

        var rgbValue:UInt32 = 0
        Scanner(string: cString).scanHexInt32(&rgbValue)

        return UIColor(
            red: CGFloat((rgbValue & 0xFF0000) >> 16) / 255.0,
            green: CGFloat((rgbValue & 0x00FF00) >> 8) / 255.0,
            blue: CGFloat(rgbValue & 0x0000FF) / 255.0,
            alpha: CGFloat(1.0)
        )
    }
}